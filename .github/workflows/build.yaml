name: Build and Analyze with Coverage

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Analyze
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install dependencies
        run: dotnet restore

      - name: Add coverlet.collector to main project
        run: dotnet add SonarDemo.csproj package coverlet.collector

      - name: Build the project
        run: dotnet build --no-restore --configuration Release

      - name: Run tests with coverage (dummy test pass)
        run: |
          echo "using System; namespace SonarDemo { public class Dummy { public void Run() => Console.WriteLine(\"Test\"); } }" > Dummy.cs
          dotnet new xunit -n Dummy.Tests
          dotnet add Dummy.Tests/Dummy.Tests.csproj reference SonarDemo.csproj
          dotnet add Dummy.Tests/Dummy.Tests.csproj package coverlet.collector
          echo "using Xunit; using SonarDemo; namespace Dummy.Tests { public class DummyTest { [Fact] public void Test() { new Dummy().Run(); } } }" > Dummy.Tests/UnitTest1.cs
          dotnet test Dummy.Tests/Dummy.Tests.csproj --no-build --collect:"XPlat Code Coverage"

      - name: Move coverage report
        run: |
          mkdir coverage
          cp $(find . -type f -name coverage.cobertura.xml) coverage/coverage.cobertura.xml

      - name: Begin SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
          ./.sonar/scanner/dotnet-sonarscanner begin \
            /k:"SonarGit" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" \
            /d:sonar.cs.opencover.reportsPaths="coverage/coverage.cobertura.xml"

      - name: Final build before end step
        run: dotnet build

      - name: End SonarQube Analysis
        run: ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"